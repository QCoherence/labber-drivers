# Instrument driver configuration file.

[General settings]

# The name is shown in all the configuration windows
name: Anapico RF Source

# The version string should be updated whenever changes are made to this
# configuration file.
version: 1.0

# Name of folder containing the code defining a custom driver. Do not
# define this item or leave it blank for any standard driver based on
# the built-in VISA interface.
driver_path:

# Default interface and address.
interface: TCPIP
address: 169.254.8.201

startup: Get config

[Model and options]
# The option section allow instruments with different options to use
# the same driver.

# List of models supported by this driver.
model_str_1: APUASYN20-4

# Check instrument model id at startup (True or False). Default is False
check_model: False

# Valid model strings returned by the instrument.
# Default value is equivalent to model_str.
# model_id_1:
# model_id_2:

# Check instrument options at startup (True or False). Default is False.
check_options: False

# If check_options is set to True, define command for getting options.
option_cmd: *OPT?

# General VISA settings for the instrument.
[VISA settings]

# Enable or disable communication over the VISA protocol (True or False).
# If False, the driver will not perform any operations (unless there is
# a custom driver).
use_visa: True

# Reset the interface (not the instrument) at startup (True or False).
# Default is False.
reset: False

# Time (in seconds) before the timing out while waiting for
# an instrument response. Default is 5.
timeout: 5

# Query instrument errors (True or False). If True, every command sent
# to the device will be followed by an error query. This is useful when
# testing new setups, but may degrade performance by slowing down
# the instrument communication. 
query_instr_errors: False 

# Bit mask for checking status byte errors (default is 255,
# include all errors).
# The bits signal the following errors:
# 0: Operation
# 1: Request control
# 2: Query error
# 3: Device error
# 4: Execution error
# 5: Command error
# 6: User request
# 7: Power on
error_bit_mask: 255

# SCPI string to be used when querying for instrument error messages.
error_cmd: :SYST:SERR?

# Initialization commands are sent to the instrument when starting
# the driver. *RST will reset the device, *CLS clears the interface.
init:

# Final commands sent to the instrument when closing the driver.
final: 

# Define quantities in sections. The section name is the quantity name
# The following keywords are allowed:
#   unit:          Quantity unit.
#   enabled:	   Determines wether the control is enabled from start.
#                  Default is True.	
#   datatype:      The data type should be one of DOUBLE, COMPLEX,
#                  VECTOR, VECTOR_COMPLEX, BOOLEAN, COMBO, or STRING.
#   def_value:     Default value.
#   low_lim:       Lowest allowable value. Defaults to -INF.
#   high_lim:      Highest allowable values. Defaults to +INF.
#   combo_def_1:   First option in a pull-down combo box. Only used
#                  when datatype=COMBO.
#   combo_def_2:   Second option in a pull-down combo box. Only used
#                  when datatype=COMBO.
#   ...
#   combo_def_n:   n-th option in a pull-down combo box. Only used when
#                  datatype=COMBO.
#   group:         Name of the group where the control belongs.
#   state_quant:   Quantity that determines this control's visibility.
#   state_value_1: Value of "state_quant" for which the control is
#                  visible.
#   state_value_2: Value of "state_quant" for which the control is
#                  visible.
#   ...
#   state_value_n: Value of "state_quant" for which the control is
#                  visible.
#   permission:    Sets read/writability, options are BOTH, READ, WRITE,
#                  or NONE. Default is BOTH 
#   set_cmd:       Command used to send data to the instrument. Put <*>
#                  where the value should appear.
#   get_cmd:       Command used to get the data from the instrument.
#                  Default is set_cmd?
#   sweep_cmd:     Command used to sweep data. Use <sr> for sweep rate,
#                  <st> for sweep time, and <*> for the value.
#   stop_cmd:      Command used to stop a sweep.


######################
# CHANNEL 1 #
######################

[Frequency 1]
unit: Hz
datatype: DOUBLE
def_value: 5.0E9
set_cmd: :SOUR1:FREQ:CW
group: Channel 1

[Power 1]
unit: dBm
datatype: DOUBLE
def_value: -10
set_cmd: :SOUR1:POW:LEV:IMM:AMPL
group: Channel 1

[Output 1]
datatype: BOOLEAN
def_value: True
set_cmd: :OUTP1
group: Channel 1

######################
# CHANNEL 2 #
######################

[Frequency 2]
unit: Hz
datatype: DOUBLE
def_value: 5.0E9
set_cmd: :SOUR2:FREQ:CW
group: Channel 2

[Power 2]
unit: dBm
datatype: DOUBLE
def_value: -10
set_cmd: :SOUR2:POW:LEV:IMM:AMPL
group: Channel 2

[Output 2]
datatype: BOOLEAN
def_value: True
set_cmd: :OUTP2
group: Channel 2

######################
# CHANNEL 3 #
######################

[Frequency 3]
unit: Hz
datatype: DOUBLE
def_value: 5.0E9
set_cmd: :SOUR3:FREQ:CW
group: Channel 3

[Power 3]
unit: dBm
datatype: DOUBLE
def_value: -10
set_cmd: :SOUR3:POW:LEV:IMM:AMPL
group: Channel 3

[Output 3]
datatype: BOOLEAN
def_value: True
set_cmd: :OUTP3
group: Channel 3

######################
# CHANNEL 4 #
######################

[Frequency 4]
unit: Hz
datatype: DOUBLE
def_value: 5.0E9
set_cmd: :SOUR4:FREQ:CW
group: Channel 4

[Power 4]
unit: dBm
datatype: DOUBLE
def_value: -10
set_cmd: :SOUR4:POW:LEV:IMM:AMPL
group: Channel 4

[Output 4]
datatype: BOOLEAN
def_value: True
set_cmd: :OUTP4
group: Channel 4